"""
This script how to generate a mitmproxy dump file,
as it would also be generated by passing `-w` to mitmproxy.
In contrast to `-w`, this gives you full control over which
flows should be saved and also allows you to rotate files or log
to multiple files in parallel.
"""
from mitmproxy import http
import sys
from pprint import pprint
import json


def response(flow: http.HTTPFlow) -> None:
	logFile=open('requests.txt', 'a')
	# Request fields from http://docs.mitmproxy.org/en/v0.17/dev/models.html#mitmproxy.models.HTTPRequest

	f = {}
	f['method'] = flow.request.method
	f['scheme'] = flow.request.scheme
	f['url'] = flow.request.url
	f['pretty_url'] = flow.request.pretty_url
	f['pretty_host'] = flow.request.pretty_host
	f['query'] = flow.request.query
	f['cookies'] = flow.request.cookies
	f['multipart_form'] = flow.request.multipart_form
	f['host'] = flow.request.host
	f['port'] = str(flow.request.port)
	f['path'] = flow.request.path
	f['query'] = flow.request.query

	cookie = flow.request.cookies

	# pprint(flow.request.cookies)

	# print(f,logFile)
	# pprint(f)
	line = f['method'] + "###" + f['scheme'] + "###" + f['pretty_url'] + "###" + f['port']
	if len(f['cookies'].fields) > 0:
		line += "###Cookie:" + json.dumps(f['cookies'].fields)
	if len(f['multipart_form'].fields) > 0:
		line += "###FormData:" + json.dumps(f['multipart_form'].fields)


	# print(line)
	print("Shit musrt be written to a logfile")
	logFile.write(line + "\n")
	
	# print(flow.request.host)



# ---s---
# {'cookies': MultiDictView[['NID', '115=3KON9ivzTJS62YtRfBm5EH3tZm1eKU_UxTA01QQeiXJofT1RQG2bSvOsNJr9_IImipDN8T2UDpuJlAt4WKStzZhNt5C3UM_zq9dMRz6i8jlxwH87LqapSh4fcs4O3aCl']],
#  'host': '172.217.20.106',
#  'method': 'POST',
#  'multipart_form': MultiDictView[],
#  'path': '/log/batch',
#  'port': 443,
#  'pretty_host': 'play.googleapis.com',
#  'pretty_url': 'https://play.googleapis.com/log/batch',
#  'query': MultiDictView[],
#  'scheme': 'https',
#  'url': 'https://172.217.20.106/log/batch'}
# ---e---
