package com.bunq.teacher;

import com.bunq.util.Property;

/**
 * This class is the 'teacher-side' link with the learner part. It receives
 * instructions, executes those and returns the output.
 * 
 * @author tom
 *
 */
public class FsmTeacher {

  private IInstrumentator instrumentator;
  private Property properties = Property.getInstance();

  /**
   * Sets all things needed for the learning process. Creates a socket for communication with the
   * learner and creates an Instrumentator, which will be used to execute the received actions 
   * on the application
   */
  public FsmTeacher() {
    System.out.println("FSMTeacher Booted.");
    if (properties.get("os").equals("android")) {
      instrumentator = new AndroidInstrumentator();
    } else {
      instrumentator = new IOSInstrumentator();
    }
  }
  
  /**
   * Starts the instrumentator.
   */
  public void start() {
    System.out.println("Start teaching.");
    instrumentator.startApp();
  }

  /**
   * Stops the instrumentator.
   */
  public void stop() {
    instrumentator.close();
    System.out.println("Stopped teaching.");
  }

  /**
   * Handles the action given in the argument, by creating an action from it, executing the action
   * and returning the output generated by the app.
   * 
   * @param input
   *          the input received from the learner
   * @return the output of the application, retrieved by action.dispatch()
   */
  public String handleAction(String input) {
    try {
      Action action = Action.parse(input);
      return action.dispatch(instrumentator);
    } catch (InvalidWordException iwe) {
      return iwe.getMessage();
    }
  }
}
