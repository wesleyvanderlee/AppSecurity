package com.wesley.VulnerabilityAlgorithm;

import java.util.ArrayList;
import java.util.List;

import com.bunq.apk.apkinfo;
import com.bunq.teacher.Action;
import com.bunq.teacher.AndroidInstrumentator;
import com.wesley.graph.Edge;
import com.wesley.graph.Graph;

public abstract class VulnerabilityIdentificationAlgorithm {
	public String name;
	public String description;

	/*
	 * -1 -> Not Evaluated 0 -> Not Present 1 -> Vulnerability Present
	 */
	public int identified;
	List<String> findings;

	public VulnerabilityIdentificationAlgorithm(String _name, String _description) {
		this.name = _name;
		this.description = _description;
		this.identified = -1;
		this.findings = new ArrayList<String>();

	}
	
	abstract public void identify(Graph graph, apkinfo apkinfo);


	public boolean isIdentified() {
		return this.identified != -1;
	}

	public boolean isPresent() {
		if (this.isIdentified()) {
			return this.identified == 1;
		} else {
			System.out
					.println("[i]\tVulnerability precense is called while identified has not run yet.\t For: " + this);
			return false;
		}

	}

	public String getName() {
		return this.name;

	}

	public String getDame() {
		return this.description;
	}

	public String toString() {
		return "Vulnerability: " + name + " " + identified + " " + findings;
	}
	
	//We want 3 tabs after name
	public String ReportingToString() {
		String res = "[*]\t" + name;
		if(this.name.length() < 8){
			res += "\t";
		}
		if(this.name.length() < 16){
			res += "\t";
		}
		return res + "\t" + identified + "\t\t" + findings;
	}
	
	public static String getReportingHeader(){
		String res = "\n\n**********************************************************************\n" +
		"**                                                              **\n" +
		"**                    --  FINDING REPORT  --                    **\n" +
		"**                                                              **\n" +
		"**********************************************************************\n";
		return res+"\tName\t\t\tIdentified\tFindings";
				
	}
	
	public void addFinding(String finding){
		findings.add(finding);
	}

	public void setIdentified(int id){
		this.identified = id;
	}
	
	public void gotoState(List<Edge> sequence, AndroidInstrumentator instrumentator) {
		if (sequence == null)	//first state or already there 
			return;
		for (Edge e : sequence) {
			try {
//				Action action = Action.parse(e.getLabel().split(" / ")[0]);
//				System.out.println(e.getLabel().split(" / ")[0]);
				Action action = Action.parse(e.getLabelAction());

//				System.out.println(action);
				action.dispatch(instrumentator);
				Thread.sleep(1000);
			} catch (Exception exception) {
				System.out.println(exception);
			}
		}
	}
	
}
