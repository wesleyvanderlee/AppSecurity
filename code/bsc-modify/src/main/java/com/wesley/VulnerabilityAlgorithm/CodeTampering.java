package com.wesley.VulnerabilityAlgorithm;

import java.util.ArrayList;
import java.util.List;

import com.bunq.apk.apkinfo;
import com.wesley.graph.Edge;
import com.wesley.graph.Graph;
import com.wesley.graph.ReferenceGraphReader;
import com.wesley.graph.Vertex;

public class CodeTampering extends VulnerabilityIdentificationAlgorithm {

	public CodeTampering() {
		super("CodeTampering", "");
	}

	public void identify(Graph graph, apkinfo apkinfo) {
		this.setIdentified(0);
		List<Vertex> Rv = new ArrayList<Vertex>();
		List<Edge> Re = new ArrayList<Edge>();

		ReferenceGraphReader rgr = new ReferenceGraphReader();
		Graph g_accent = rgr.read();
		if(g_accent != null){
			for(Vertex v : graph.getVertexes()){
				if(!g_accent.getVertexes().contains(v)){
					Rv.add(v);
				}
			}
			for(Edge e : graph.getEdges()){
				if(!g_accent.getEdges().contains(e)){
					Re.add(e);
				}
			}
		}
		
		// All states are checked
		if (!Rv.isEmpty()) {
			findings.add("The following states do not appear in the reference model: " + Rv.toString());
			this.setIdentified(1); // Likely vulnerability is present
		}
		if (!Re.isEmpty()) {
			findings.add("The following transitions do not appear in the reference model: " + Re.toString());
			this.setIdentified(1); // Likely vulnerability is present
		}
	}
}
